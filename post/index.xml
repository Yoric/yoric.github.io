<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Il y a du thé renversé au bord de la table !</title>
    <link>https://yoric.github.io/post/</link>
    <description>Recent content in Posts on Il y a du thé renversé au bord de la table !</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you likes to quote or reproduce.</copyright>
    <lastBuildDate>Fri, 23 Feb 2018 10:04:39 +0100</lastBuildDate>
    
	<atom:link href="https://yoric.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript Binary AST diaries - How to replace proving with validating for fun and profit</title>
      <link>https://yoric.github.io/post/binary-ast-pcc/</link>
      <pubDate>Fri, 23 Feb 2018 10:04:39 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/binary-ast-pcc/</guid>
      <description>&lt;p&gt;In this entry, I’d like to discuss one of the most interesting and unusual aspects of the Binary AST: how we gain performance by turning &lt;em&gt;proof-building&lt;/em&gt; into &lt;em&gt;validation&lt;/em&gt;, and why this is very good news for performance (and maybe not so good news for file size).&lt;/p&gt;

&lt;h1 id=&#34;in-the-previous-episodes&#34;&gt;In the previous episodes&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The JavaScript Binary AST is a proposed compression format for JavaScript, designed to compress source code and make it much faster to load. This is a work in progress by Mozilla, Bloomberg and Facebook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;proofs-in-javascript&#34;&gt;Proofs, in JavaScript?&lt;/h1&gt;

&lt;p&gt;As every other programming language, the execution model of JavaScript could not work without some guarantees. For instance, you do not execute a JavaScript file if you do not first have a guarantee that it is syntactically correct. A file is not syntactically correct if it a labelled &lt;code&gt;break&lt;/code&gt; statement uses a label that does not exist, etc.&lt;/p&gt;

&lt;p&gt;Whenever a developer needs to deal with guarantees of this kind, the simplest way to do it without introducing bugs is to make sure that the program can only reach the point where the guarantees are necessary &lt;em&gt;after&lt;/em&gt; all the checks have been completed. Quite often, the component in charge of performing the checks will issue some kind of object once the checks are complete, and this object is required to proceed with execution. If this is the only way of obtaining the object, the object is considered a &lt;em&gt;proof&lt;/em&gt; that the checks have passed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Typestates in Rust</title>
      <link>https://yoric.github.io/post/rust-typestate/</link>
      <pubDate>Thu, 22 Feb 2018 15:15:55 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/rust-typestate/</guid>
      <description>&lt;p&gt;A long time ago, the Rust language was a language with typestate. Officially, typestates were dropped long before Rust 1.0. In this entry, I’ll get you in on the worst kept secret of the Rust community: Rust still has typestates.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Binary AST - Motivations and Design Decisions - Part 1</title>
      <link>https://yoric.github.io/post/binary-ast-motivations-design-decisions-1/</link>
      <pubDate>Thu, 07 Sep 2017 23:31:43 +0200</pubDate>
      
      <guid>https://yoric.github.io/post/binary-ast-motivations-design-decisions-1/</guid>
      <description>&amp;ldquo;The key to making programs fast is to make them do practically nothing.&amp;rdquo; - Mike Haertel, creator of GNU Grep.
Binary AST - &amp;ldquo;Binary Abstract Syntax Tree&amp;rdquo; - is Mozilla&amp;rsquo;s proposal for specifying a binary-encoded syntax for JS with the intent of allowing browsers and other JS-executing environments to parse and load code as much as 80% faster than standard minified JS.
It has recently cleared Stage 1 of the TC39 standards process, and while the final byte-level format isn&amp;rsquo;t completely nailed down, we&amp;rsquo;re confident that the final implementation will deliver the impressive performance improvements promised by the prototype.</description>
    </item>
    
    <item>
      <title>JavaScript Binary AST Engineering Newsletter #1</title>
      <link>https://yoric.github.io/post/binary-ast-engineering-newsletter-1/</link>
      <pubDate>Fri, 18 Aug 2017 13:46:54 +0200</pubDate>
      
      <guid>https://yoric.github.io/post/binary-ast-engineering-newsletter-1/</guid>
      <description>Hey, all cool kids have exciting Engineering Newsletters these days, so it&amp;rsquo;s high time the JavaScript Binary AST got one!
Summary JavaScript Binary AST is a joint project between Mozilla and Facebook to rethink how JavaScript source code is stored/transmitted/parsed. We expect that this project will help visibly speed up the loading of large codebases of JS applications and will have a large impact on the JS development community, including both web developers, Node developers, add-on developers and ourselves.</description>
    </item>
    
    <item>
      <title>Towards a JavaScript Binary AST</title>
      <link>https://yoric.github.io/post/binary-ast-newsletter-1/</link>
      <pubDate>Thu, 03 Aug 2017 23:31:43 +0200</pubDate>
      
      <guid>https://yoric.github.io/post/binary-ast-newsletter-1/</guid>
      <description>In this blog post, I would like to introduce the JavaScript Binary AST, an ongoing project that we hope will help make webpages load faster, along with a number of other benefits.
A little background Over the years, JavaScript has grown from one of the slowest scripting languages available to a high-performance powerhouse, fast enough that it can run desktop, server, mobile and even embedded applications, whether through web browsers or other environments.</description>
    </item>
    
    <item>
      <title>Project Lighthouse: A post-mortem</title>
      <link>https://yoric.github.io/post/post-mortem-lighthouse/</link>
      <pubDate>Mon, 20 Feb 2017 10:44:33 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/post-mortem-lighthouse/</guid>
      <description>A few weeks ago, Mozilla pulled the plug on its Connected Devices Experiment: a bunch of internal non-profit hardware-related startups. One of our main objectives was to determine if we could come up with designs that could help turn the tide against the spyware-riddled and gruyère-level security devices that are currently being offered (or pushed) to unwary users.
One of the startups was Project Lighthouse. We tried to provide an affordable, simple and privacy-friendly tool for people suffering from vision impairment and who needed help in their daily life.</description>
    </item>
    
    <item>
      <title>Things to do before you[r project] die[s]</title>
      <link>https://yoric.github.io/post/how-to-survive/</link>
      <pubDate>Fri, 17 Feb 2017 00:10:34 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/how-to-survive/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that all projects die, eventually, and that most projects die
before they have had a chance to have any impact. This is true of personal projects,
of open-source projects, of startup projects, of hardware projects, and more.&lt;/p&gt;

&lt;p&gt;A few days ago, &lt;a href=&#34;https://wiki.mozilla.org/Connected_Devices/Projects/Project_Lighthouse&#34;&gt;the IoT project on which I was working&lt;/a&gt;
did just that. It was funded, it was open-source, it was open-hardware, and it
still died before having the opportunity to release anything useful. In our case,
we got pretty far, didn&amp;rsquo;t run out of funds, and were a little polish away from
putting our first alpha-testers in front of a pretty advanced prototype before
a higher-level strategy pivot killed a number of projects at once.&lt;/p&gt;

&lt;p&gt;Ah, well, risks of the trade.&lt;/p&gt;

&lt;p&gt;Still, working on it, we managed to learn or come up with a few tricks
to increase the chances of surviving at least long enough to release a product.
I&amp;rsquo;ll try to summarize and explain some of these tricks here. Hopefully, if you
have a project, regardless of funding and medium, you may find some of this
summary useful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migrating again</title>
      <link>https://yoric.github.io/post/migration-2/</link>
      <pubDate>Fri, 17 Feb 2017 00:07:21 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/migration-2/</guid>
      <description>While Hubpress is a cool project, I had no idea of what it could be doing with my password, so I have migrated to Hugo.</description>
    </item>
    
    <item>
      <title>Extracting text from images is not easy (who would have guessed?)</title>
      <link>https://yoric.github.io/post/extracting-text-from-images/</link>
      <pubDate>Sun, 01 Jan 2017 23:44:19 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/extracting-text-from-images/</guid>
      <description>At its core, Lighthouse is an idea we have been discussing in Connected Devices: can we build a device that will help people with partial or total vision disabilities?
From there, we started a number of experiments. I figured out it was time to braindump some of them.
Our problem Consider the following example:
How do we get from this beautiful picture of Mozilla&amp;rsquo;s Paris office to the text &amp;ldquo;PRIDE and PREJUDICE&amp;rdquo;, &amp;ldquo;Jane Austen&amp;rdquo;, &amp;ldquo;Great Books&amp;rdquo;, &amp;ldquo;Great Prices&amp;rdquo;, &amp;ldquo;$9.</description>
    </item>
    
    <item>
      <title>Blog migration in progress</title>
      <link>https://yoric.github.io/post/migration/</link>
      <pubDate>Thu, 01 Dec 2016 23:42:19 +0100</pubDate>
      
      <guid>https://yoric.github.io/post/migration/</guid>
      <description>I am in the process of migrating to github.io. You can find my previous blog on Wordpress.</description>
    </item>
    
  </channel>
</rss>